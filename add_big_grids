#!/usr/bin/python3
"""
Get the big files we can't store in the repo
"""

import copy
import json
from datetime import datetime, timedelta
from pathlib import Path

import requests

yesterday = datetime.now() - timedelta(days=1)

HRRR = {
    "hrrr-total-precip": [
        "https://noaa-hrrr-bdp-pds.s3.amazonaws.com/hrrr.20220818/conus/hrrr.t00z.wrfsfcf00.grib2",
        "https://noaa-hrrr-bdp-pds.s3.amazonaws.com/hrrr.20220818/conus/hrrr.t00z.wrfsfcf06.grib2",
    ]
}

NBM = {
    "nbm-co-01h": [
        yesterday.strftime(
            "https://nomads.ncep.noaa.gov/pub/data/nccf/com/blend/prod/blend.%Y%m%d/00/core/blend.t00z.core.f001.co.grib2"
        ),
        yesterday.strftime(
            "https://nomads.ncep.noaa.gov/pub/data/nccf/com/blend/prod/blend.%Y%m%d/00/core/blend.t00z.core.f002.co.grib2"
        ),
    ]
}

NBM_CONFIG = {
    "plugin": "nbm-co-01h",
    "url": None,
    "local_source": "cumulus-geoproc-test-data/fixtures/nbm-co-01h/blend.t00z.core.f001.co.grib2",
    "versioned": True,
    "products": 2,
    "name_pattern": "blend.%Y%m%dt%Hz.core.f001.co.grib2",
    "attr": {
        "54": {
            "GRIB_COMMENT": "Temperature [C]",
            "GRIB_ELEMENT": "T",
            "GRIB_SHORT_NAME": "2-HTGL",
            "GRIB_UNIT": "[C]",
        },
        "46": {"GRIB_ELEMENT": "QPF01", "GRIB_SHORT_NAME": "0-SFC"},
    },
}

FIXTURES = Path(__file__).parent.joinpath("fixtures")


def get_grids(acquire: dict):
    """get_grids"""
    for plugin, _urls in acquire.items():
        for _url in _urls:
            filename = Path(_url).name
            save_to = FIXTURES / plugin / filename
            req = requests.get(_url, timeout=30, stream=True)
            with save_to.open("wb") as fptr:
                for chunk in req.iter_content(chunk_size=1024):
                    if chunk:
                        fptr.write(chunk)

    update_nbm_config(acquire)


def update_nbm_config(acquire: dict):
    """update_nbm_config"""
    configs = []
    for plugin, _urls in acquire.items():
        config = FIXTURES.joinpath(plugin, plugin).with_suffix(".json")
        for url in _urls:
            nbm_config = copy.deepcopy(NBM_CONFIG)
            file = Path(url).name
            nbm_config["local_source"] = (
                Path(nbm_config["local_source"]).with_name(file).as_posix()
            )
            configs.append(nbm_config)

    with config.open("w", encoding="utf-8") as fptr:
        json.dump(configs, fptr, indent=4)


if __name__ == "__main__":
    get_grids(HRRR)
    get_grids(NBM)
    update_nbm_config(NBM)
